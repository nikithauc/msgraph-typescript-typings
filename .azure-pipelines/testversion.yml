# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

variables:
  newVersionStr: "in"
steps:

# - task: PowerShell@2
#   displayName: 'Git: checkout master'
#   inputs:
#     targetType: inline
#     # workingDirectory: '$(Build.SourcesDirectory)/msgraph-typescript-typings'
#     script: |
#       git checkout master | Write-Host
- task: PowerShell@2
  displayName: 'Git: branch from master named with the build id: $(Build.BuildId)'
  inputs:
    targetType: inline
    #workingDirectory: '$(Build.SourcesDirectory)/msgraph-typescript-typings'
    script: |
      
      Write-Host "The new branch name will be: $env:branchName"
      git checkout -B "testingVersion" | Write-Host
      
- task: PowerShell@2
  displayName: 'Git: set user config'
  inputs:
    targetType: inline
    # workingDirectory: '$(Build.SourcesDirectory)/msgraph-typescript-typings'
    script: |
      git config user.email "nikithauc@gmail.com"
      git config user.name "nikithauc"
      
- task: PowerShell@2
  inputs:
    #filePath: "$(System.DefaultWorkingDirectory)/scripts/src/CalculateNewProductionVersion.ps1"
    targetType: inline
    script: | 
      Write-Host "Hello, world!"
      $releasesUrl = "https://api.github.com/repos/microsoftgraph/msgraph-typescript-typings/releases"

      Write-Host "Getting list of releases with '$($releasesUrl)'" -ForegroundColor Blue
      $releasesJSON = Invoke-RestMethod -Uri $releasesUrl -Method Get;

      if ($releasesJSON.Count -eq 0) {
          Write-Host "Unable to get releases list with '$($releasesUrl)'" -ForegroundColor Red;
          Write-Host "NOTE: This Script cannot handle the first release" -ForegroundColor Cyan;
          EXIT 1;
      }

      $latestReleaseJSON = $releasesJSON[0]; 
      $latestReleaseVersionStr = $latestReleaseJSON.tag_name;
      $isPreRelease = $latestReleaseJSON.prerelease;

      if ([string]::IsNullOrEmpty($latestReleaseVersionStr)) {
          Write-Host "Unable read the latest release tag name" -ForegroundColor Red;
          Write-Host "Latest Release Data:" -ForegroundColor Cyan;
          Write-Host -Object $latestReleaseJSON -ForegroundColor Cyan;
          EXIT 1;
      }

      if ([string]::IsNullOrEmpty($isPreRelease)) {
          Write-Host "Unable read the latest release is pre-release or not" -ForegroundColor Red;
          Write-Host "Latest Release Data:" -ForegroundColor Cyan;
          Write-Host -Object $latestReleaseJSON -ForegroundColor Cyan;
          EXIT 1;
      }

      $isPreRelease = $isPreRelease -as [bool];
      $versionArr = $latestReleaseVersionStr.split(".");

      if ($isPreRelease) {
          Write-Host "Preview release is not expected in this repository" -ForegroundColor Red;
          Write-Host "Latest Release Data:" -ForegroundColor Cyan;
          Write-Host -Object $latestReleaseJSON -ForegroundColor Cyan;
          EXIT 1;
      }

      if ($versionArr[2].Contains("-")) {
              Write-Host "Lastest release '$($latestReleaseVersionStr)' is mentioned as production release but version string has Preview string" -ForegroundColor Red;
              Write-Host "Last Release Data:" -ForegroundColor Cyan;
              Write-Host -Object $lastReleaseJSON -ForegroundColor Cyan;
              EXIT 1;
      }

      $minorVersion = $versionArr[1] -as [int];
      $newMinorVersion = $minorVersion + 1;
      $newPatchVersion = 0;

      $versionArr[1] = $newMinorVersion;
      $versionArr[2] = $newPatchVersion;

      $newVersionStr = $versionArr -join ".";
        
      Write-Host "Current version is '$($latestReleaseVersionStr)'" -ForegroundColor Blue;
      Write-Host "New calculated version is '$($newVersionStr)'" -ForegroundColor Green;

      Write-Host "##vso[task.setvariable variable=NEW_VERSION_STRING]$($newVersionStr)";

      Write-Host "Updated new version in global variable" -ForegroundColor Green;
      
- task: NodeTool@0 
  displayName: Update to  Version '$newVersionStr'
  inputs:
     versionSpec: 12
     workingDir: scripts
     script: |
      npm install 
      npm run update:version -- --newVersion= '$newVersionStr'
- script: |
    echo Add other tasks to build, test, and deploy your project.
    echo See https://aka.ms/yaml
  displayName: 'Run a multi-line script'
  
  
- task: PowerShell@2
  displayName: 'Git: stage and commit generated files'
  env: # [2]
    GIT_REDIRECT_STDERR: "2>&1"
  inputs:
    targetType: inline
    # workingDirectory: '$(Build.SourcesDirectory)/msgraph-typescript-typings'
    script: |
      Write-Host "About to add files....." -ForegroundColor Green
      git add -A | Write-Host
      git commit -m "Commiting test" | Write-Host
      
      Write-Host "Added and committed all files." -ForegroundColor Green
- task: PowerShell@2
  displayName: 'Git: push updates'
  env: # [2]
    GIT_REDIRECT_STDERR: "2>&1"
  inputs:
    targetType: inline
    # workingDirectory: '$(Build.SourcesDirectory)/msgraph-typescript-typings'
    script: |
      git push origin "testingVersion" | Write-Host
      Write-Host "Pushed the results of the build to the testingVersion branch." -ForegroundColor Green
  enabled: true
  

