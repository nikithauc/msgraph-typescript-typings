trigger:
  - beta

pr: none

pool:
    vmImage: 'ubuntu-latest'

steps:
- script: git checkout beta
- task: CopyFiles@2
  displayName: 'Copy Files to staging directory'
  inputs:
    SourceFolder: '$(System.DefaultWorkingDirectory)'
    Contents: |
     **/*
    TargetFolder: '$(Build.ArtifactStagingDirectory)'
- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: drop'

  #   - task: NodeTool@0
  #     inputs:
  #         versionSpec: '10.x'
  #     displayName: 'Install Node.js'

  #   - script: |
  #         npm install
  #     displayName: 'Install dependencies'
      

  #   - script: |
  #           npm version ${{ variables.version }}
  #     displayName: 'set manual'
  #     condition: ne('${{ variables.version }}', '')
  #   - script: |
  #          # Config can be set in .npmrc
  #           git config --global user.email "nikithauc@gmail.com"
  #           git config --global user.name "nikitha chettiar"
  #           npm version prerelease --preid=preview
  #           npm version
  #     displayName: 'set auto'
  #     condition: eq('${{ variables.version }}', '')

    # - script: 
    #     npm version minor 
    #     git status
    #   workingDirectory: $(Build.ArtifactStagingDirectory)
    #   displayName: 'minor version'
    
    # - script: |
    #     npm pack
    #   displayName: 'Package for release'

    # - bash: | # Grab the package version
    #     v=`node -p "const p = require('./package.json'); p.version;"`
    #     echo "##vso[task.setvariable variable=packageVersion]$v"

    # - task: CopyFiles@2
    #   inputs:
    #     contents: '*.*'
    #     targetFolder: $(Build.ArtifactStagingDirectory)/npm
    #   displayName: 'Copy archives to artifacts staging directory'
    
    # - task: CopyFiles@2
    #   inputs:
    #     sourceFolder: '$(Build.SourcesDirectory)'
    #     contents: 'package.json' 
    #     targetFolder: $(Build.ArtifactStagingDirectory)/npm
    #   displayName: 'Copy package.json'

   
        # git push origin azure
    # - script: |
    #       npm pack
    #   displayName: 'Package package'
    
    # - task: CopyFiles@2
    #   inputs:
    #       contents: '*.tgz'
    #       targetFolder: $(Build.ArtifactStagingDirectory)
    #   displayName: 'Copy archives to artifacts staging directory'

    # - task: PublishBuildArtifacts@1
    #   inputs:
    #       pathtoPublish: $(Build.ArtifactStagingDirectory)
    #       artifactName: package
    #   displayName: 'Publish artifacts'